// const db = mysql.createConnection({
//   user: process.env.DB_USER,
//   host: process.env.DB_HOST,
//   database: process.env.DB_NAME,
// });

// Conectar a la base de datos
// db.connect((err) => {
//   if (err) {
//     console.error("Error conectando a la base de datos:", err);
//     process.exit(1); // Sale del proceso si hay un error de conexión
//   } else {
//     console.log("Conectado a la base de datos MySQL");
//   }
// });

// app.get("/", (req, res) => {
//   return res.json("From Backend Side");
// });

// app.get("/users", (req, res) => {
//   const q = "SELECT * FROM usuarios";
//   db.query(q, (err, data) => {
//     console.log(err);
//     if (err) return res.json(err);
//     return res.json(data);
//   });
// });

// app.get("/posts", (req, res) => {
//   const q = "SELECT * FROM posts";
//   db.query(q, (err, data) => {
//     console.log(err);
//     if (err) return res.json(err);
//     return res.json(data);
//   });
// });

// app.get("/eventos", (req, res) => {
//   const q = "SELECT * FROM eventos";
//   db.query(q, (err, data) => {
//     console.log(err);
//     if (err) return res.json(err);
//     return res.json(data);
//   });
// });

// // Importa bcrypt.js para la encriptación de contraseñas
// const {
//   encryptPassword,
//   comparePasswords,
//   generateToken,
// } = require("./bcrypt.js"); // Asegúrate de que el nombre sea correcto

// // Ruta para crear un usuario
// app.post("/api/users/create", async (req, res) => {
//   const { username, email, password, image } = req.body; // Obtenemos los datos del cuerpo de la solicitud

//   try {
//     // Encriptar la contraseña usando bcrypt
//     const hashedPassword = await encryptPassword(password);

//     // Consulta SQL para insertar un nuevo usuario con la contraseña encriptada
//     const q =
//       "INSERT INTO usuarios (user_email, user_name, password, foto_users) VALUES (?, ?, ?, ?)";
//     db.query(q, [email, username, hashedPassword, image], (err, data) => {
//       if (err) {
//         console.log(err);
//         return res.status(500).json({ message: "Error al crear usuario" });
//       } else {
//         return res.status(201).json({ message: "Usuario creado con éxito" });
//       }
//     });
//   } catch (error) {
//     console.error("Error al crear usuario:", error);
//     return res.status(500).json({ message: "Error del servidor" });
//   }
// });

// app.post("/api/users/login", async (req, res) => {
//   const { username, password } = req.body; // Obtenemos los datos del cuerpo de la solicitud

//   try {
//     // Consulta SQL para buscar al usuario por su nombre de usuario
//     const q = "SELECT * FROM usuarios WHERE user_name = ?";
//     db.query(q, [username], async (err, data) => {
//       if (err) {
//         console.error("Error al buscar usuario:", err);
//         return res.status(500).json({ message: "Error del servidor" });
//       }

//       if (data.length === 0) {
//         // No se encontró el usuario
//         return res.status(400).json({ message: "Usuario no encontrado" });
//       }

//       const user = data[0];

//       // Comparar la contraseña ingresada con la contraseña encriptada almacenada
//       const isValidPassword = await comparePasswords(password, user.password);

//       if (!isValidPassword) {
//         return res.status(400).json({ message: "Contraseña incorrecta" });
//       }

//       // Generar un token JWT para el usuario autenticado
//       const token = generateToken(user);

//       // Responder con el token y los datos del usuario
//       res.json({ message: "Inicio de sesión exitoso", token, user });
//     });
//   } catch (error) {
//     console.error("Error al iniciar sesión:", error);
//     return res.status(500).json({ message: "Error del servidor" });
//   }
// });

// // BASE DE DATOS POST

// // http://localhost:3001/api/posts/${id}

// app.get('/api/posts/:id', (req, res) => {
//   const { id } = req.params;
//   const q = 'SELECT * FROM posts WHERE id = ?';
//   db.query(q, [id], (err, data) => {
//     if (err) {
//       console.error('Error al obtener el post:', err);
//       res.status(500).send({ message: 'Error al obtener el post' });
//       return;
//     }
//     if (data.length === 0) {
//       res.status(404).send({ message: 'Post no encontrado' });
//       return;
//     }
//     res.send(data[0]);
//   });
// });

// // https://localhost:3001/posts/${currentId}

// app.get('/api/posts/:currentId', async (req, res) => {
//   const { currentId } = req.params;
//   const q = 'SELECT * FROM posts WHERE id = ?';
//   db.query(q, [currentId], (err, data) => {
//     if (err) {
//       console.error('Error al obtener el post:', err);
//       res.status(500).send({ message: 'Error al obtener el post' });
//       return;
//     }
//     if (data.length === 0) {
//       res.status(404).send({ message: 'Post no encontrado' });
//       return;
//     }
//     res.send(data[0]);
//   });
// });


// // Middleware para verificar si el usuario está autenticado
// const isAuthenticated = (req, res, next) => {
//   const token = req.headers.authorization?.split(" ")[1]; // Extraer el token de la solicitud

//   if (!token) {
//     return res.status(401).json({ message: "No token disponible. No autorizado." });
//   }

//   try {
//     // Verificar el token
//     const decoded = jwt.verify(token, "JWT_SECRET"); 
//     req.user = decoded; 
//     next(); 
//   } catch (error) {
//     return res.status(401).json({ message: "Invalid token. Unauthorized." });
//   }
// };

// // https://localhost:3001/api/posts?page=${currentPage}

// app.get('/api/posts', (req, res) => {
//   const q = 'SELECT * FROM posts';
//   db.query(q, (err, data) => {
//     if (err) {
//       // console.error('Error al obtener los posts:', err);
//       res.status(500).send({ message: 'Error al obtener los posts' });
//       return;
//     }
//     res.send(data);
//   });
// });

// app.post("/api/posts/create", isAuthenticated, async (req, res) => {
//   const { title, content, featured_image } = req.body; // Extraer los datos del post del cuerpo de la solicitud

//   try {

//     // Consulta SQL para insertar un nuevo post
//     const q = "INSERT INTO posts (title, content, featured_image) VALUES (?, ?, ?)";
//     db.query(q, [title, content, featured_image], (err, data) => {
//       if (err) {
//         console.log(err);
//         return res.status(500).json({ message: "Error al crear el post" });
//       } else {
//         return res.status(201).json({ message: "Post creado con éxito" });
//       }
      
//     });
//   } catch (error) {
//     console.error("Error al crear el post:", error);
//     return res.status(500).json({ message: "Error del servidor" });
//   }
// });

// app.put("/api/posts/update", isAuthenticated, async (req, res) => {
//   const { title, content, featured_image } = req.body; // Extraer los datos del post del cuerpo de la solicitud

//   try {
//     // Consulta SQL para insertar un nuevo post
//     const q = "UPDATE posts SET title = ?, content = ?, featured_image = ? WHERE id = ?";
//     db.query(q, [title, content, featured_image], (err, data) => {
//       if (err) {
//         console.log(err);
//         return res.status(500).json({ message: "Error al modificar el post" });
//       } else {
//         return res.status(201).json({ message: "Post modificado con éxito" });
//       }
//     });
//   } catch (error) {
//     console.error("Error al modificar el post:", error);
//     return res.status(500).json({ message: "Error del servidor" });
//   }
// });

// app.delete("/api/posts/delete", isAuthenticated, async (req, res) => {
//   const { id } = req.body; // Extrae el ID de la publicación del cuerpo de la solicitud

//   if (!id) {
//     return res.status(400).json({ message: "Se requiere el ID de la publicación para eliminarla" });
//   }

//   try {
//     // Consulta SQL para eliminar una publicación existente
//     const q = "DELETE FROM posts WHERE id = ?";
//     db.query(q, [id], (err, data) => {
//       if (err) {
//         console.error("Error al eliminar la publicación:", err);
//         return res.status(500).json({ message: "Error al eliminar la publicación" });
//       } else {
//         if (data.affectedRows === 0) {
//           return res.status(404).json({ message: "Publicación no encontrada" });
//         }
//         return res.status(200).json({ message: "Publicación eliminada con éxito" });
//       }
//     });
//   } catch (error) {
//     console.error("Error del servidor al eliminar la publicación:", error);
//     return res.status(500).json({ message: "Error del servidor" });
//   }
// });



// app.listen(3001, () => {
//     console.log("Listening on port 3001");
// })